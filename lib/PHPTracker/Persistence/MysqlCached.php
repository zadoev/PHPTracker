<?php
/**
 * Created by JetBrains PhpStorm.
 * User: cd
 * Date: 13.09.13
 * Time: 12:24
 * To change this template use File | Settings | File Templates.
 */

class PHPTracker_Persistence_MysqlCached extends PHPTracker_Persistence_Mysql
{
    public function getPeers($info_hash, $peer_id, $compact = false, $no_peer_id = false)
    {

        $key = MemcacheKeys::getPhpTrackerPeersCache($info_hash);
        $results = Yii::app()->cache->get($key);

        if ( ! $results  )
        {
            $sql = <<<SQL
SELECT
    `peer_id`,
    INET_NTOA( `ip_address` ) AS 'ip_address',
    `port`
FROM
    `phptracker_peers`
WHERE
    `info_hash`           = :info_hash
    AND
    (
        `expires` IS NULL
        OR
        `expires` > CURRENT_TIMESTAMP
    )
SQL;

            $results =  $this->query( $sql, array(
                ':info_hash'    => $info_hash,
                ':peer_id'      => $peer_id,
            ) );
            $results = $results->toArray();
            Yii::app()->cache->set($key, $results, MemcacheKeys::getPhpTrackerPeersCacheTime());

        }




        if ( $compact )
        {
            $return = "";
            foreach ( $results as $row )
            {
                if ( $row['peer_id'] == $peer_id)
                    continue;
                // We cannot select IP long from MySQL directly on 32 bits systems, because in PHP integers are signed.
                $return .= pack( 'N', ip2long( $row['ip_address'] ) );
                $return .= pack( 'n', intval( $row['port'] ) );
            }
        }
        else
        {
            $return = array();
            foreach ( $results as $row )
            {
                if ( $row['peer_id'] == $peer_id)
                    continue;

                $peer = array(
                    'ip'        => $row['ip_address'],
                    'port'      => $row['port'],
                );
                if ( !$no_peer_id )
                {
                    $peer['peer id'] = $row['peer_id'];
                }
                $return[] = $peer;
            }
        }
        return $return;    }

    public function getPeerStats($info_hash, $peer_id)
    {
        return parent::getPeerStats($info_hash, $peer_id); // TODO: Change the autogenerated stub
    }


}